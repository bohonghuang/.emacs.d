fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))
(file (file-name-nondirectory (or (buffer-file-name) (buffer-name))))
(pfile (file-relative-name (or (buffer-file-name) (buffer-name)) (project-root (project-current))))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

latex-mode

(beg "\\begin{" (s env) "}" r> n> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" q "}")
(enum "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(item "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

lisp-mode sly-mrepl-mode

(ign "(declare (ignore " p "))")
(ignble "(declare (ignorable " p "))")
(optim "(declare (optimize (speed " (p "3") ")" n> "(debug " (p "0") ")" n> "(space " (p "0") ")" n> "(compilation-speed " (p "0") ")" n> "(safety " (p "0") ")))")
(o3 "(declare (optimize (speed 3)))")
(d3 "(declare (optimize (debug 3)))")
(O3 "(declare (optimize (speed 3)" n> "(debug 0)" n> "(safety 0)))")
(type "(declare (type " p " " p "))")
(ftype "(declaim (fype (function (" p ") " p ") " p "))")
(inline "(declaim (inline " p "))")
(callf "(setf " (s var) " (" p " " (s var) "))")
(ql "(ql:quickload :" p ")")
(defpack "(defpackage " (s package) n "  (:use " (p "#:cl #:alexandria") ")" n> "(:nicknames #:" p "))" n> n> "(in-package #:" (s package) ")")
(inpack "(in-package #:" p ")")
(unwind "(unwind-protect" n> " (progn " n> p ")" n> p ")")
(param "(defparameter *" p "* " p ")")
(var "(defvar *" p "* " p ")")
(const "(defconstant +" p "+ " p ")")
(special "(declare (special " p "))")
(exit "#+sbcl (sb-ext:exit) #+(or ecl clasp) (si:exit)")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)

eshell-mode

(for "for " (p "i") " in " p " { " q " }")
(while "while { " p " } { " q " }")
(until "until { " p " } { " q " }")
(if "if { " p " } { " q " }")
(ife "if { " p " } { " p " } { " q " }")
(unl "unless { " p " } { " q " }")
(unle "unless { " p " } { " p " } { " q " }")

text-mode

(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)
(rot13 (p "plain text" text) n "----" n (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))

rst-mode

(title (make-string (length title) ?=) n (p "Title: " title) n (make-string (length title) ?=) n)

java-mode

(cls (p "public ") "class " (p (file-name-base (or (buffer-file-name) (buffer-name)))) " {" n> r> n "}" >)
(main "public static void main(String[] args) {" n> r> n "}" >)
(f (p "public") " " (p "void") " " (p "function") "(" p ") {" n> r> n "}" >)

python-mode

(f "def " (p "function") "(" (p "*args, **kwds") "):" n> r> n> "pass")
(m "def " (p "method") "(self, " (p "*args, **kwds") "):" n> r> n> "pass")
(cls "class " (p "Class") ":" n> r> n> "pass")
(main "def main():" n> r> n> "pass" n> n> "if __name__ == '__main__':" n> "main()" n)

c-mode c++-mode

(main "int main(" (p "int argc, char *argv[]") ") {" n> r> n> "return 0;" n "}" >)
(once "#ifndef " (p (concat (string-inflection-upcase-function (file-name-nondirectory (file-name-sans-extension (or (buffer-file-name) "")))) "_H") header) n> "#define " header n> n> q n> n> "#endif /* " header " */")
(f (p "void" rettype) " " (p "function" name) "(" p ") {" n> q n> "return" (pcase rettype ((pred (string-prefix-p "*" name)) " NULL;") ((or "int" "char" "short" "long") " 0;") ("float" " 0.0f;") ("double" " 0.0;") (_ ";"))  n "}" >)
(defstruct "typedef struct __" (s name) " {" n> r> q n "} " (s name) ";")
(fori "for(int " (p "i" loop-var) " = " (p "0")"; " (s loop-var) " < " (p "size") "; " (s loop-var) "++)" q)

org-mode

(head "#+TITLE: " p n "#+AUTHOR: " (p (user-full-name)) n>)
(quote "#+BEGIN_QUOTE" n> r> n> "#+END_QUOTE")
(exam "#+BEGIN_EXAMPLE" n> r> n> "#+END_EXAMPLE")
(center "#+BEGIN_CENTER" n> r> n> "#+END_CENTER")
(com "#+BEGIN_COMMENT" n> r> n> "#+END_COMMENT")
(verse "#+BEGIN_VERSE" n> r> n> "#+END_VERSE")
(src "#+BEGIN_SRC " p n> r> n> "#+END_SRC" :post (org-edit-src-code))
(exp "#+BEGIN_EXPORT " p n> r> n> "#+END_EXPORT" :post (org-edit-export-block))

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
