;;; -*- lexical-binding: t -*-

(defun filter-initials-region (&optional beg end)
  (interactive)
  (let ((letters nil)
        (beg (or beg (region-beginning)))
        (end (or end (region-end))))
    (goto-char beg)
    (save-restriction
      (narrow-to-region beg end)
      (while
          (progn
            (push (upcase (char-after)) letters)
            (ignore-errors
              (search-forward-regexp "[ \\-][A-z]")
              (backward-char)
              t))))
    (delete-region beg end)
    (insert (concat (reverse letters)))))

(defun filter-and-upcase-initials-region (&optional beg end)
  (interactive)
  (filter-initials-region beg end)
  (upcase-region (region-beginning) (region-end)))

(defun reverse-chars-region (beg end)
 "Reverse characters between BEG and END."
 (interactive "r")
 (let ((region (buffer-substring beg end)))
   (delete-region beg end)
   (insert (nreverse region))))

(defun cycle-spacing-dwim ()
  (interactive)
  (if (and (region-active-p) (< (region-beginning) (region-end)))
      (let ((beg (region-beginning))
            (end (set-marker (make-marker) (region-end)))
            (rep (eq last-command #'cycle-spacing-dwim))
            (regexp "[ \t\v\f]+"))
        (goto-char beg)
        (when (looking-at regexp)
          (search-forward-regexp regexp))
        (setq beg (point))
        (delete-horizontal-space)
        (when (or (not rep) (= (point) beg))
          (insert " "))
        (setq beg (point))
        (goto-char end)
        (when (looking-at regexp)
          (search-forward-regexp regexp))
        (setq end (point))
        (delete-horizontal-space)
        (when (or (not rep) (= (point) end))
          (insert " ")
          (backward-char))
        (set-mark beg)
        (setq deactivate-mark nil))
    (call-interactively #'cycle-spacing)))

(provide 'simple-ext)
