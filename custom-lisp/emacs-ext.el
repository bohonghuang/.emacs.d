;;;  -*- lexical-binding: t; -*-

(defmacro with-suppressed-message (&rest body)
  "Suppress new messages while BODY is evaluated."
  (declare (indent 0))
  (let ((message-log-max nil))
    `(with-temp-message (or (current-message) "") ,@body)))

(defun toggle-dedicate-window ()
  (interactive)
  (let ((window (selected-window)))
    (set-window-dedicated-p window (not (window-dedicated-p window)))))

(defun toggle-window-frame-decorated ()
  (interactive)
  (set-frame-parameter (window-frame) 'undecorated
                       (not (frame-parameter (window-frame) 'undecorated))))

(defun compile-user-emacs-directory ()
  (interactive)
  (mapc (lambda (file)
          (byte-compile-file file)
          (if (and (version<= "28" emacs-version) (native-comp-available-p))
              (native-compile file)))
        (directory-files "~/.emacs.d/" t ".el$")))

(defun url-encode-region ()
  (interactive)
  (unless (region-active-p) (error "Region is not activated"))
  (let* ((beg (region-beginning))
         (end (region-end))
         (url (url-encode-url (buffer-substring-no-properties beg end))))
    (delete-region (region-beginning) (region-end))
    (goto-char beg)
    (insert url)))

(defun emacs-lisp-macroexpand@around (fun &rest args)
  (cl-flet ((sexp-range () (list (point) (save-excursion (forward-sexp) (point)))))
    (let ((buffer-name "*emacs-lisp-macroexpand*"))
      (if (called-interactively-p)
          (if (not (string= (buffer-name (current-buffer)) buffer-name))
              (cl-destructuring-bind (beg end) (sexp-range)
                (let ((exp-string (buffer-substring beg end))
                      (buffer (get-buffer-create buffer-name)))
                  (with-current-buffer buffer
                    (emacs-lisp-mode)
                    (read-only-mode -1)
                    (delete-region (point-min) (point-max))
                    (insert exp-string)
                    (goto-char (point-min))
                    (emacs-lisp-macroexpand)
                    (goto-char (point-min))
                    (read-only-mode +1)
                    (local-set-key (kbd "q") #'quit-window)
                    (local-set-key (kbd "C-c RET") #'emacs-lisp-macroexpand)
                    (local-set-key (kbd "C-/") #'emacs-lisp-macroexpand-buffer-undo))
                  (pulse-momentary-highlight-region beg end)
                  (pop-to-buffer buffer)))
            (read-only-mode -1)
            (save-excursion (emacs-lisp-macroexpand))
            (apply #'pulse-momentary-highlight-region (sexp-range))
            (read-only-mode +1))
        (apply fun args)))))

(defun emacs-lisp-macroexpand-buffer-undo ()
  (interactive)
  (read-only-mode -1)
  (undo)
  (let ((end (point))
        (beg (progn (backward-sexp) (point))))
    (pulse-momentary-highlight-region beg end))
  (read-only-mode +1))

(advice-add #'emacs-lisp-macroexpand :around #'emacs-lisp-macroexpand@around)

(provide 'emacs-ext)
